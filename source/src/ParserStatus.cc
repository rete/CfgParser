  /// \file ParserStatus.cc
/*
 *
 * ParserStatus.cc source template generated by fclass
 * Creation date : mar. juin 4 2013
 *
 * This file is part of CfgParser libraries.
 *
 * CfgParser is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CfgParser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CfgParser.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : Eté Rémi
 * @version 0.1.0 13/08/2013
 * @copyright 2013 Eté Rémi
 *
 */


#include "ParserStatus.hh"

using namespace std;

namespace cfgparser {


	string StatusCode::ToString() const {

		if( fParserStatus == fParserSuccess )    return "fParserSuccess";
		else if( fParserStatus == fParserNoSectionError ) return "fParserNoSectionError";
		else if( fParserStatus == fParserError ) return "fParserError";
		else if( fParserStatus == fParserDuplicateSectionError ) return "fParserDuplicateSectionError";
		else if( fParserStatus == fParserNoOptionError ) return "fParserNoOptionError";
		else if( fParserStatus == fParserInterpolationError ) return "fParserInterpolationError";
		else if( fParserStatus == fParserInterpolationDepthError ) return "fParserInterpolationDepthError";
		else if( fParserStatus == fParserInterpolationMissingOptionError ) return "fParserInterpolationMissingOptionError";
		else if( fParserStatus == fParserInterpolationSyntaxError ) return "fParserInterpolationSyntaxError";
		else if( fParserStatus == fParserMissingSectionNameError ) return "fParserMissingSectionNameError";
		else if( fParserStatus == fParserInvalidSectionKey ) return "fParserInvalidSectionKey";
		else if( fParserStatus == fParserValueError ) return "fParserValueError";
		else return "fParserParsingError";
	}


	StatusCode CFGPARSER_SUCCESS( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserSuccess;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_INVALID_SECTION_KEY( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserInvalidSectionKey;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_NO_SECTION_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserNoSectionError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_VALUE_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserValueError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_DUPLICATE_SECTION_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserDuplicateSectionError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_NO_OPTION_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserNoSectionError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_INTERPOLATION_DEPTH_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserInterpolationDepthError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_INTERPOLATION_MISSING_OPTION_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserInterpolationMissingOptionError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_INTERPOLATION_SYNTAX_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserInterpolationSyntaxError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_MISSING_SECTION_NAME_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserMissingSectionNameError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode CFGPARSER_PARSING_ERROR( const std::string &message ) {

		StatusCode statusCode;
		statusCode.fParserStatus = fParserParsingError;
		statusCode.message = message;
		return statusCode;
	}

	StatusCode& StatusCode::operator = ( StatusCode const &statusCode ) {

		this->message = statusCode.message;
		this->fParserStatus = statusCode.fParserStatus;
		return *this;
	}


	bool operator != ( const StatusCode &sc1 , const StatusCode &sc2 ) {

		return ( sc1.fParserStatus != sc2.fParserStatus );
	}

	bool operator == ( const StatusCode &sc1 , const StatusCode &sc2 ) {

		return ( sc1.fParserStatus == sc2.fParserStatus );
	}



}  // namespace 

