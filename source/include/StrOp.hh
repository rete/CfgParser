/// \file StrOp.hh
/*
 *
 * StrOp.hh header template generated by fclass
 * Creation date : Mon Apr 15 15:17:05 2013
 *
 * This file is part of CfgParser libraries.
 *
 * CfgParser is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CfgParser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CfgParser.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author : Eté Rémi
 * @version 0.1.0 13/08/2013
 * @copyright 2013 Eté Rémi
 *
 */


#ifndef STROP_HH
#define STROP_HH

#include <iostream>
#include <fstream>
#include <string>
#include <list>
#include <cstdlib>
#include <sstream>
#include <map>
#include <vector>
#include <typeinfo>

#include "ParserStatus.hh"

namespace cfgparser {


	/**
	 * @brief  Normalize the name
	 */
	void normalizeName( std::string *str );


	/**
	 * @brief Trims leading and trailing spaces from the string 'str'
	 */
	void strTrim( std::string *str );

	/**
	 * @brief Trims trailing spaces from the string 'str'
	 */
	void rStrTrim( std::string *str );

	/**
	 * @brief Splits the string in many string portion
	 * separated by a given delimiter
	 */
	std::vector<std::string> split( const std::string &str , const char delimiter = ' ' , int maxSplit = -1 );

	/**
	 * @brief Lowers the string
	 */
	std::string toLower( const std::string &str );

	/**
	 * @brief Uppers the string
	 */
	std::string toUpper( const std::string &str );

	/**
	 * @brief Finds the section name in a complete
	 * line of cfgparser file
	 */
	StatusCode groupSectionName( const std::string &completeSectionLine , std::string &sectionName );

	/**
	 * @brief Finds an option, its separator and its
	 * associated value from a complete line of cfgparser file
	 */
	StatusCode groupOptionSeparatorAndValue( const std::string &parserLine , std::string &option , std::string &separator , std::string &value );

	/**
	 * @brief Converts the string value into type T value. See template specialization in .cc
	 */
	template<typename T>
	void convert( const std::string &value , T &convertedVal )
	{

		throw CfgParserException("Can't convert value type from string to " + std::string( typeid(T).name() ) + ". For available types, see doc.");
	}



	template<typename T>
	std::string toString( const T& value )
	{
		throw CfgParserException("Can't convert value type from string to " + std::string( typeid(T).name() ) + ". For available types, see doc.");
	}



//	/**
//	 * @brief Converts a string into type T
//	 */
//	template<typename T>
//	T convert( const std::string &value ) {
//
//		throw CfgParserException("Can't convert value type from string to " + std::string( typeid(T).name() ) + ". For available types, see doc.");
//	}
//
//	/**
//	 * @brief Converts a string into type int
//	 */
//	template<>
//	int convert( const std::string &value ) {
//
//		return std::move( atoi( value.c_str() ) );
//	}
//
//	/**
//	 * @brief Converts a string into type float
//	 */
//	template<>
//	float convert( const std::string &value ) {
//
//		return std::move( atof( value.c_str() ) );
//	}
//
//	/**
//	 * @brief Converts a string into type double
//	 */
//	template<>
//	double convert( const std::string &value ) {
//
//		return std::move( (double)atof( value.c_str() ) );
//	}
//
//	/**
//	 * @brief Converts a string into type bool
//	 */
//	template<>
//	bool convert( const std::string &value ) {
//
//		if( value == "true" || value == "1" || value == "on" || value == "yes" )
//			return true;
//		else if ( value == "false" || value == "0" || value == "off" || value == "no" )
//			return false;
//		else
//			throw CfgParserException( "Value error : No known conversion from" + value + " to boolean type." );
//	}
//
//	/**
//	 * @brief Converts a string into type vector<string>
//	 */
//	template<>
//	std::vector<std::string> convert( const std::string &val ) {
//
//		std::vector<std::string> value;
//		std::string s;
//		char motif = ':';
//
//		for ( unsigned int i=0 ; i<val.size() ; i++ ) {
//
//			if( val[i] != motif )
//				s.push_back( val[i] ) ;
//			else {
//				value.push_back( s );
//				s = "";
//			}
//			if( i == val.size() - 1 )
//				value.push_back( s );
//		}
//		return std::move( value );
//	}
//
//	/**
//	 * @brief Converts a string into type vector<int>
//	 */
//	template<>
//	std::vector<int> convert( const std::string &val ) {
//
//		std::vector<int> value;
//		std::string s;
//		char motif = ':';
//
//		for (unsigned int i=0 ; i<val.size() ; i++) {
//
//			if( val[i] != motif )
//				s.push_back( val[i] ) ;
//			else {
//				value.push_back( atoi( s.c_str() ) );
//				s = "";
//			}
//			if( i == val.size() - 1 )
//				value.push_back( atoi( s.c_str() ) );
//		}
//
//		return std::move( value );
//	}
//
//	/**
//	 * @brief Converts a string into type vector<double>
//	 */
//	template<>
//	std::vector<double> convert( const std::string &val ) {
//
//		std::vector<double> value;
//		std::string s;
//		char motif = ':';
//
//		for (unsigned int i=0 ; i<val.size() ; i++) {
//
//			if( val[i] != motif )
//				s.push_back( val[i] ) ;
//			else {
//				value.push_back( atof( s.c_str() ) );
//				s = "";
//			}
//			if( i == val.size() - 1 )
//				value.push_back( atof( s.c_str() ) );
//		}
//
//		return std::move( value );
//	}
//
//	/**
//	 * @brief Converts a string into type T
//	 */
//	template<>
//	std::vector<float> convert( const std::string &val ) {
//
//		std::vector<float> value;
//		std::string s;
//		char motif = ':';
//
//		for (unsigned int i=0 ; i<val.size() ; i++) {
//
//			if( val[i] != motif )
//				s.push_back( val[i] ) ;
//			else {
//				value.push_back( atof( s.c_str() ) );
//				s = "";
//			}
//			if( i == val.size() - 1 )
//				value.push_back( atof( s.c_str() ) );
//		}
//
//		return std::move( value );
//	}
//
//	/**
//	 * @brief Converts a string into type vector<bool>
//	 */
//	template<>
//	std::vector<bool> convert( const std::string &val ) {
//
//		std::vector<bool> value;
//		std::string s;
//		char motif = ':';
//
//		for (unsigned int i=0 ; i<val.size() ; i++) {
//
//			if( val[i] != motif )
//				s.push_back( val[i] ) ;
//			else {
//
//				if( s == "true" || s == "1" || s == "on" || s == "yes" )
//					value.push_back( true );
//				else if ( s == "false" || s == "0" || s == "off" || s == "no" )
//					value.push_back( false );
//				else
//					throw CfgParserException("Value error : No known conversion from "+ val +" to boolean type.");
//				s = "";
//			}
//			if( i == val.size() - 1 ) {
//
//				if( s == "true" || s == "1" || s == "on" || s == "yes" )
//					value.push_back( true );
//				else if ( s == "false" || s == "0" || s == "off" || s == "no" )
//					value.push_back( false );
//				else
//					throw CfgParserException("Value error : No known conversion from "+ val +" to boolean type.");
//			}
//		}
//
//		return std::move( value );
//	}
//
//	/**
//	 * @brief Converts a type T into type string
//	 */
//	template<typename T>
//	std::string convert( const T &value )
//	{
//		throw CfgParserException("Can't convert value type from " + std::string( typeid(T).name() ) + " to string. For available types, see doc.");
//	}
//


	/**
	 * @brief  Various typedefs
	 */
	typedef std::vector<std::string> StringCollection;
	typedef std::vector<const std::string> ConstStringCollection;


}  //  end namespace cfgparser

#endif  // STROP_HH
