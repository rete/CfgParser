  /// \file RawCfgParser.hh
/*
 *
 * RawCfgParser.hh header template generated by fclass
 * Creation date : jeu. juin 6 2013
 *
 * This file is part of CfgParser libraries.
 *
 * CfgParser is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CfgParser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CfgParser.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author : Eté Rémi
 * @version 0.1.0 13/08/2013
 * @copyright 2013 Eté Rémi
 *
 */


#ifndef RAWCFGPARSER_HH
#define RAWCFGPARSER_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector>
#include <algorithm>
#include <fstream>


#include "Section.hh"
#include "ParserStatus.hh"




namespace cfgparser {


	/*!
	 *
	 * brief Class RawCfgParser
	 *
	 */

	class RawCfgParser {

		public:

			/*!
			 *
			 * @brief  Default Constructor
			 *
			 */
			RawCfgParser( const OptionValueMap *optionValueMap = 0 , bool allowNoValue = false );

			/*!
			 *
			 * @brief  Default Destructor
			 *
			 */
			virtual ~RawCfgParser();

			/*!
			 *
			 * @brief  Create a section in the parser.
			 *
			 */
			StatusCode CreateSection( const std::string &secName );

			/*!
			 *
			 * @brief  Get a string value with a given section name and option name
			 *
			 */
			virtual StatusCode GetValue( const std::string& section , const std::string &key, std::string *value ) const;

			/*!
			 *
			 * @brief  Get an int value with a given section name and option name
			 *
			 */
			StatusCode GetValue( const std::string& section , const std::string &key, int *value ) const;

			/*!
			 *
			 * @brief  Get a double value with a given section name and option name
			 *
			 */
			StatusCode GetValue( const std::string& section , const std::string &key, double *value ) const;

			/*!
			 *
			 * @brief  Get a boolean value with a given section name and option name
			 *
			 */
			StatusCode GetValue( const std::string& section , const std::string &key, bool *value ) const;

			/*!
			 *
			 * @brief  Get a string vector with a given section name and option name
			 *
			 */
			StatusCode GetValue( const std::string& section , const std::string &key, std::vector< std::string > *value ) const;

			/*!
			 *
			 * @brief  Get an int vector with a given section name and option name
			 *
			 */
			StatusCode GetValue( const std::string& section , const std::string &key, std::vector< int > *value ) const;

			/*!
			 *
			 * @brief  Get a double vector with a given section name and option name
			 *
			 */
			StatusCode GetValue( const std::string& section , const std::string &key, std::vector< double > *value ) const;

			/*!
			 *
			 * @brief  Get a bool vector with a given section name and option name
			 *
			 */
			StatusCode GetValue( const std::string& section , const std::string &key, std::vector< bool > *value ) const;

			/*!
			 *
			 * @brief  Return true if the the given section has the given option.
			 *
			 */
			bool HasOption( const std::string &sectionName , const std::string &key ) const;

			/*!
			 *
			 * @brief  Return true if the parser instance contains the given section
			 *
			 */
			bool HasSection( const std::string &secName ) const;

			/*!
			 *
			 * @brief  Return true if the parser instance contains the given section
			 *
			 */
			bool HasSection( const Section *section ) const;

			/*!
			 *
			 * @brief  Return the given section. Throw if the section doesn't exists.
			 *
			 */
			const Section *GetSection( const std::string &sectionName ) const;

			/*!
			 *
			 * @brief  Read the given file in the ini format style.
			 *
			 */
			StatusCode Read( const std::string &fileName );

			/*!
			 *
			 * @brief  Read the given file in the ini format style.
			 *
			 */
			StatusCode Read( const std::vector< std::string > &fileNames );

			/*!
			 *
			 * @brief  Read the given file in the ini format style.
			 *
			 */
			StatusCode Read( std::ifstream& stream );

			/*!
			 *
			 * @brief  Read the given file in the ini format style.
			 *
			 */
			StatusCode Read( std::ifstream* stream );

			/*!
			 *
			 * @brief  Remove an option from a given section
			 *
			 */
			StatusCode RemoveOption( const std::string &sectionName , const std::string &opt );

			/*!
			 *
			 * @brief  Remove a section from the parser instance
			 *
			 */
			StatusCode RemoveSection( const std::string &sectionName );

			/*!
			 *
			 * @brief  Set a string value in the given section and a given option
			 *
			 */
			StatusCode SetValue( const std::string& section , const std::string &key, const std::string &value );

			/*!
			 *
			 * @brief  Set an int value in the given section and a given option
			 *
			 */
			StatusCode SetValue( const std::string& section , const std::string &key, const int &value );

			/*!
			 *
			 * @brief  Set a double value in the given section and a given option
			 *
			 */
			StatusCode SetValue( const std::string& section , const std::string &key, const double &value );

			/*!
			 *
			 * @brief  Set a boolean value in the given section and a given option
			 *
			 */
			StatusCode SetValue( const std::string& section , const std::string &key, const bool &value );

			/*!
			 *
			 * @brief  Set a string vector in the given section and a given option
			 *
			 */
			StatusCode SetValue( const std::string& section , const std::string &key, const std::vector< std::string > &value );

			/*!
			 *
			 * @brief  Set an int vector in the given section and a given option
			 *
			 */
			StatusCode SetValue( const std::string& section , const std::string &key, const std::vector< int > &value );

			/*!
			 *
			 * @brief  Set a double vector in the given section and a given option
			 *
			 */
			StatusCode SetValue( const std::string& section , const std::string &key, const std::vector< double > &value );

			/*!
			 *
			 * @brief  Set a boolean vector in the given section and a given option
			 *
			 */
			StatusCode SetValue( const std::string& section , const std::string &key, const std::vector< bool > &value );

			/*!
			 *
			 * @brief  Write all the default section and all the sections in the given file in an ini standard format
			 *
			 */
			StatusCode Write( const std::string &fileName ) const;

			/*!
			 *
			 * @brief  Write all the default section and all the sections in the given stream file instance in an ini standard format
			 *
			 */
			StatusCode Write( std::ofstream& stream ) const;

			/*!
			 *
			 * @brief  Write all the default section and all the sections in the given stream file instance in an ini standard format
			 *
			 */
			StatusCode Write( std::ofstream* stream ) const;

			/*!
			 *
			 * @brief  Print the sections in the console ( default section and all sections )
			 *
			 */
			StatusCode Print() const;

			/*!
			 *
			 * @brief  Return the option name after a 'ToLower' operation
			 *
			 */
			std::string OptionXForm( const std::string &optionStr ) const;

			/*!
			 *
			 * @brief  Return the options of the given section. Throw if the sections doesn't exists.
			 *
			 */
			const StringCollection GetOptions( const std::string &secName ) const;

			/*!
			 *
			 * @brief  Return all the values of the given section
			 *
			 */
			const StringCollection GetValues( const std::string &secName ) const;

			/*!
			 *
			 * @brief  Clear the parser content.
			 *
			 */
			StatusCode Clear();


		// inline member functions
		public:

			/*!
			 *
			 * @brief  Return the default section
			 *
			 */
			const Section *GetDefaultSection()
				{ return defaultSection; }

			/*!
			 *
			 *
			 *
			 */
			SectionCollection *GetSections()
				{ return sections; }


		// protected member functions
		protected:

			/*!
			 *
			 * @brief  Add a section to current section collection.
			 * Simply do additional checks
			 *
			 */
			StatusCode AddSection( Section *section );

			/*!
			 *
			 * @brief  Read the given file in the ini format style. Private method containing the reading algorithm
			 *
			 */
			StatusCode _Read( std::ifstream* stream );

			/*!
			 *
			 * @brief  Get a section with a given name
			 *
			 */
			StatusCode GetSection( const std::string &sectionName , Section *&sec ) const;


		// protected members
		protected:

			SectionCollection *sections;
			Section *defaultSection;
			static const std::string DEFAULT_SECTION;
			bool allowNoValue;




	};  // class

}  // namespace 

#endif  //  RAWCFGPARSER_HH
