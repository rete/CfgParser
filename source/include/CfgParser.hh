/// \file CfgParser.hh
 /*
 *
 * CfgParser.hh header template generated by fclass
 * Creation date : jeu. juin 6 2013
 *
 * This file is part of CfgParser libraries.
 *
 * CfgParser is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CfgParser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CfgParser.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author : Eté Rémi
 * @version 0.1.0 13/08/2013
 * @copyright 2013 Eté Rémi
 *
 */

#ifndef CFGPARSER_HH
#define CFGPARSER_HH

#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <sstream>
#include <map>
#include <vector>
#include <algorithm>


// cfgparser includes
#include "Section.hh"
#include "ParserStatus.hh"
#include "StrOp.hh"
#include "RawCfgParser.hh"


namespace cfgparser {


	/*!
	 *
	 * @brief  ChainSection class,
	 * this class is a helper class for CfgParser
	 * class while using interpolations.
	 *
	 * It aims to find a value in a given set of sections
	 * by looking for in each section with a specific
	 * order. First section appended, first section
	 * checked. This class is not really useful if
	 * used in an other context of CfgParser library.
	 *
	 */

	class ChainSection {

		public:

			/*!
			 *
			 * @brief  Constructor
			 *
			 */
			ChainSection()
				: sectionCollection( new SectionCollection() ) {}

			/*!
			 *
			 * @brief  Destructor
			 *
			 */
			~ChainSection() {

				sectionCollection->clear();
				delete sectionCollection;
			}

			/*!
			 *
			 * @brief Add a section to the section list
			 *
			 */
			void AddSection( Section *sec )
				{ sectionCollection->push_back( sec ); }

			/*!
			 *
			 * @brief  Return a value by looking in the order where
			 * the sections have been added.
			 *
			 */
			StatusCode GetValue( const std::string &option , std::string *value ) const;

			/*!
			 *
			 * @brief  Return all the options of all sections
			 *
			 */
			StringCollection GetOptions() const;

			/*!
			 *
			 * @brief  Return true if one of the sections has the given option
			 *
			 */
			bool HasOption( const std::string &opt ) const;


		// private members
		private:
			SectionCollection *sectionCollection;    ///< The sections in a specific order


	};

	/*!
	 *
	 * @brief  CfgParser class,
	 * implements a new GetValue() virtual method for strings
	 * that interpolate a specific string portion like %()s
	 * with a given set of options.
	 *
	 * Read in the same manner as the RawCfgParser class.
	 *
	 * Example:
	 *
	 *    [section]
	 *
	 *    option1 : 42
	 *    option2 : %(option1)s is the answer of everything
	 *
	 *
	 * Here, option2 will resolve in "42 is the answer of everything"
	 * To disable this feature and retrieve the raw value, use the
	 * boolean value raw = true.
	 *
	 */

	class CfgParser : public RawCfgParser {


		// public member functions
		public :

			/*!
			 *
			 * @brief Default constructor
			 *
			 */
			CfgParser();

			/*!
			 *
			 * @brief  Get a string value with a given section name and option name
			 *
			 */
			virtual StatusCode GetValue( const std::string& section , const std::string &key, std::string *value , bool raw = false , Section *vars = 0 ) const;


		// protected member functions
		protected:

			/*!
			 *
			 * @brief  Interpolate a given string with a given set of sections (ChainSection).
			 * The final value is retrieved in the 'value' argument
			 *
			 */
			StatusCode Interpolate( const std::string &str , const ChainSection *chainSection , std::string *value ) const;

	};


}  //  end namespace cfgparser


#endif  // CFGPARSER_HH
