  /// \file Section.hh
/*
 *
 * Section.hh header template generated by fclass
 * Creation date : mar. juin 4 2013
 *
 * This file is part of CfgParser libraries.
 *
 * CfgParser is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CfgParser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CfgParser.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author : Eté Rémi
 * @version 0.1.0 13/08/2013
 * @copyright 2013 Eté Rémi
 * 
 */


#ifndef SECTION_HH
#define SECTION_HH

#include <iostream> 
#include <string> 
#include <cstdlib> 
#include <cmath> 
#include <vector>
#include <map>
#include <algorithm>
#include <sstream>

#include "ParserStatus.hh"
#include "StrOp.hh"

namespace cfgparser {


	class Section;
	class RawCfgParser;
	class CfgParser;
	class SafeCfgParser;

	typedef std::map <std::string,std::string> OptionValueMap;
	typedef std::vector<Section*> SectionCollection;
	typedef std::vector<const Section *> ConstSectionCollection;


	/**
	 * @brief  Section class,
	 * represents a config section in cfg file.
	 *
	 * A section has a name and a set of option/value
	 * pairs of various types. These values can be
	 * retrieved by using GetValue() methods.
	 * A value can be set only by using a parser
	 * instance so that a section can't exists
	 * without any parser instance.
	 */

	class Section {

	// protected members
	protected :

		std::string _name;                           ///< The section name
		OptionValueMap _optionValueMap;              ///< The option/value pairs

	// public member functions
	public:

		/**
		 * @brief Default constructor deleted
		 */
		Section() = delete;

		/**
		 * @brief Constructor with section name
		 */
		Section( const std::string &n );

		/**
		 * @brief Default Destructor
		 */
		~Section();

		/**
		 * @brief Copy constructor
		 */
		Section( const Section &section );

		/**
		 * @brief Move constructor
		 */
		Section( Section &&section );

		/**
		 * @brief Returns a value with type T
		 */
		template<typename T>
		T getValue( const std::string &key ) const
		{
			T finalVal;
			std::string value = getValue<std::string>( key );
			cfgparser::convert< T >( value , finalVal );
			return std::move( finalVal );
		}

		/**
		 * @brief Set a value with type T
		 */
		template<typename T>
		void setValue( const std::string &key , const T &value )
		{
			if( key.empty() )
				return;

			_optionValueMap[ key ] = std::move( cfgparser::toString<T>( value ) );
		}

		/**
		 * @brief Returns true if the section contains the given option
		 */
		bool hasOption( const std::string &opt ) const;

		/**
		 * @brief Returns true if the section is empty
		 */
		bool isEmpty() const;

		/**
		 * @brief Print the section with all option-value pairs
		 */
		void print() const;

		/**
		 * @brief Remove an option from the section
		 */
		void removeOption( const std::string &opt );

		/**
		 * @brief Clear the section
		 */
		void clear();

		/**
		 * @brief Set the section name
		 */
		inline void setName( const std::string &n )
		{
			_name = n;
		}

		/**
		 * @brief Returns the section name
		 */
		inline const std::string &getName() const
		{
			return _name;
		}

		/**
		 * @brief Returns the Option/Value map containing all option-value pairs.
		 */
		inline const OptionValueMap &getOptionValueMap() const
		{
			return _optionValueMap;
		}

		/**
		 * @brief  Operator to add section
		 */
		Section& operator +=( const Section& section );

		/**
		 * @brief 'Addition' operator
		 */
		friend Section operator +( Section const& section1, Section const& section2 );


	};  // class

	/**
	 * @brief Operator to add section. Keep the name of the first section
	 */
	Section operator+ ( Section const& section1, Section const& section2 );


}  // namespace 

#endif  //  SECTION_HH
